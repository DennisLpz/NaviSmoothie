{"version":3,"sources":["components/SmoothieForm.jsx","components/SmoothieDetail.jsx","components/SmoothieCard.jsx","components/ViewSmoothies.jsx","components/NavBar.jsx","components/mockData.js","components/assets/useLocalStorage.js","App.jsx","index.js"],"names":["SmoothieForm","props","useState","name","setName","ingredients","setIngredients","instructions","setInstructions","notes","setNotes","className","onSubmit","event","preventDefault","cardObj","id","newId","addCard","style","display","flexDirection","onChange","e","target","value","type","required","width","SmoothieDetail","SmoothieCard","tempName","setTempName","tempIngredients","setTempIngredients","tempInstructions","setTempInstructions","tempNotes","setTempNotes","show","setShow","handleClose","setEditForm","editForm","Button","variant","onClick","Modal","onHide","Header","closeButton","Title","Body","Footer","smoothies","filter","smoothie","window","confirm","deleteCard","saveCardEdit","ViewSmoothies","renderCards","map","i","search","setSearch","renderMatching","setRenderMatching","findSmoothieMatches","input","smoothiesArray","regex","RegExp","drink","match","length","renderMatchCard","card","alert","placeholder","NavBar","to","cardHolder","useLocalStorage","key","initialValue","item","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","uuidv4","require","v4","App","MockData","setSmoothies","setNewId","isUniqueName","some","exact","path","temp","indexToRemove","indexOf","splice","indexToEdit","newCard","push","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.345641f9.chunk.js","sourcesContent":["/**\n * @name SmoothieForm\n * @user Component that allows user to create a new smoothie.\n */\n\nimport React, { useState } from \"react\";\n\nfunction SmoothieForm(props) {\n  //establish state for input fields\n  const [name, setName] = useState(\"\");\n  const [ingredients, setIngredients] = useState([]);\n  const [instructions, setInstructions] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n\n  //onChange event handler to update state when key is pressed in input field\n  //by default HTML/JS manually re-renders entire page whenever form is submitted, React only re-renders components that changed\n\n  const submitForm = (event) => {\n    event.preventDefault();\n\n    const cardObj = {\n      name,\n      ingredients,\n      instructions,\n      notes,\n      id: props.newId,\n    };\n\n    props.addCard(cardObj);\n\n    //clear input fields\n    setName(\"\");\n    setIngredients([]);\n    setInstructions(\"\");\n    setNotes(\"\");\n  };\n\n  return (\n    <div className=\"row justify-content-center mt-5\">\n      <div className=\"col-6\">\n        <form\n          onSubmit={submitForm}\n          style={{ display: \"flex\", flexDirection: \"column\" }}\n        >\n          <label>\n            Name of Your Creation:\n            <input\n              className=\"form-control\"\n              onChange={(e) => {\n                setName(e.target.value);\n              }}\n              type=\"text\"\n              name=\"creation-name\"\n              value={name}\n              required\n            />\n          </label>\n          <label>\n            Ingredients:\n            <textarea\n              className=\"form-control\"\n              style={{ width: \"100%\" }}\n              onChange={(e) => {\n                setIngredients(e.target.value);\n              }}\n              type=\"text\"\n              name=\"ingredients\"\n              value={ingredients}\n              required\n            />\n          </label>\n          <label>\n            Instructions:\n            <textarea\n              className=\"form-control\"\n              style={{ width: \"100%\" }}\n              onChange={(e) => {\n                setInstructions(e.target.value);\n              }}\n              type=\"text\"\n              name=\"instructions\"\n              value={instructions}\n              required\n            />\n          </label>\n          <label>\n            Notes:\n            <textarea\n              className=\"form-control\"\n              style={{ width: \"100%\" }}\n              onChange={(e) => {\n                setNotes(e.target.value);\n              }}\n              type=\"text\"\n              name=\"notes\"\n              value={notes}\n              required\n            />\n          </label>\n\n          <button className=\"btn btn-primary\" type=\"submit\">\n            Add Smoothie\n          </button>\n          <button className=\"btn btn-secondary mt-2\" type=\"reset\">\n            Cancel\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default SmoothieForm;\n","/**\n * @name SmoothieDetail\n * @desc Component to show more details when user clicks each smoothie card.\n */\n\nimport React from \"react\";\n\nfunction SmoothieDetail({ ingredients, instructions, notes }) {\n  return (\n    <div className=\"smoothie-detail\">\n      <h5 className=\"smoothie-detail-ing\">Ingredients:</h5>\n      <p>{ingredients}</p>\n\n      <h5 className=\"smoothie-detail-inst\">Instructions:</h5>\n      <p>{instructions}</p>\n\n      <h5 className=\"smoothie-detail-notes\">Notes:</h5>\n      <p>{notes}</p>\n    </div>\n  );\n}\n\nexport default SmoothieDetail;\n","/**\n * @name SmoothieCard\n * @desc Displays individual cards in SmoothieDisplay component.\n */\n\nimport React, { useState } from \"react\";\nimport SmoothieDetail from \"./SmoothieDetail\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nfunction SmoothieCard(props) {\n  //update state for edit mode; default state as existing text\n  const [tempName, setTempName] = useState(props.name);\n  const [tempIngredients, setTempIngredients] = useState(props.ingredients);\n  const [tempInstructions, setTempInstructions] = useState(props.instructions);\n  const [tempNotes, setTempNotes] = useState(props.notes);\n\n  //React bootstrap modal hooks\n  const [show, setShow] = useState(false);\n\n  //React bootstrap modal handleClicks\n  const handleClose = () => {\n    setShow(false);\n    setEditForm(false);\n  };\n\n  const handleShow = () => {\n    setShow(true);\n    setEditForm(false);\n  };\n\n  //to delete card\n  const removeSmoothie = (id) => {\n    //find current card we want to delete\n    const cardObj = props.smoothies.filter((smoothie) => smoothie.id === id);\n    //confirm if we want to delete\n    if (window.confirm(\"Sure you want to dump this smoothie?\")) {\n      props.deleteCard(cardObj);\n    }\n  };\n\n  //in edit mode\n  const [editForm, setEditForm] = useState(false);\n  //enter edit mode\n  const editMode = () => {\n    setEditForm(true);\n  };\n\n  //to edit card\n  const saveChanges = (id) => {\n    const cardObj = {\n      name: tempName,\n      ingredients: tempIngredients,\n      instructions: tempInstructions,\n      notes: tempNotes,\n      id: props.id,\n    };\n    props.saveCardEdit(cardObj);\n    //exit back to view mode\n    setEditForm(false);\n  };\n\n  return (\n    <>\n      <Button className=\"smoothie-card\" variant=\"primary\" onClick={handleShow}>\n        <h3 className=\"card-title\">\n          <span>{props.name}</span>\n        </h3>\n      </Button>\n\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          {editForm ? (\n            <input\n              type=\"text\"\n              value={tempName}\n              onChange={(e) => setTempName(e.target.value)}\n              id={props.id}\n            />\n          ) : (\n            <Modal.Title>Smoothie: {props.name}</Modal.Title>\n          )}\n        </Modal.Header>\n        <Modal.Body>\n          {editForm ? (\n            <div className=\"editModal\">\n              <h5>Ingredients:</h5>\n              <textarea\n                className=\"editText\"\n                type=\"text\"\n                value={tempIngredients}\n                onChange={(e) => setTempIngredients(e.target.value)}\n                id={props.id}\n              />\n              <h5>Instructions:</h5>\n              <textarea\n                className=\"editText\"\n                type=\"text\"\n                value={tempInstructions}\n                onChange={(e) => setTempInstructions(e.target.value)}\n                id={props.id}\n              />\n              <h5>Notes:</h5>\n              <textarea\n                className=\"editText\"\n                type=\"text\"\n                value={tempNotes}\n                onChange={(e) => setTempNotes(e.target.value)}\n                id={props.id}\n              />\n            </div>\n          ) : (\n            <SmoothieDetail\n              ingredients={props.ingredients}\n              instructions={props.instructions}\n              notes={props.notes}\n              id={props.id}\n            />\n          )}\n        </Modal.Body>\n        <Modal.Footer className=\"modalButtons\">\n          <Button variant=\"dark\" className=\"mr-5\" onClick={removeSmoothie}>\n            Delete Card\n          </Button>\n\n          <Button\n            variant=\"secondary\"\n            className=\"closeModalButton\"\n            onClick={handleClose}\n          >\n            Close\n          </Button>\n          {editForm ? (\n            <Button variant=\"primary\" onClick={saveChanges}>\n              Save Changes\n            </Button>\n          ) : (\n            <Button variant=\"primary\" onClick={editMode}>\n              Edit Card\n            </Button>\n          )}\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nexport default SmoothieCard;\n","/**\n * @name ViewSmoothies\n * @desc Highest component in hierarchy that displays both SmoothieDisplay and SmoothieCard.\n */\n\nimport React, { useState } from \"react\";\nimport SmoothieCard from \"./SmoothieCard\";\n\nfunction ViewSmoothies({\n  smoothies,\n  deleteCard,\n  setIngredients,\n  setInstructions,\n  setNotes,\n  saveCardEdit,\n}) {\n  const renderCards = smoothies.map((smoothie, i) => (\n    <SmoothieCard\n      key={smoothie.id}\n      name={smoothie.name}\n      ingredients={smoothie.ingredients}\n      instructions={smoothie.instructions}\n      notes={smoothie.notes}\n      id={i}\n      deleteCard={deleteCard}\n      saveCardEdit={saveCardEdit}\n      smoothies={smoothies}\n      setIngredients={setIngredients}\n      setInstructions={setInstructions}\n      setNotes={setNotes}\n    />\n  ));\n\n  //does our input match a smoothie card\n  const [search, setSearch] = useState(\"\");\n\n  //do we want to render all cards or just matching cards\n  const [renderMatching, setRenderMatching] = useState([]);\n\n  //traverse thru smoothie's array of objs to find potential matches\n  const findSmoothieMatches = (input, smoothiesArray) => {\n    const regex = new RegExp(input, \"gi\"); //gi specifies to look globally and indifferently (not case-sensitive)\n    return smoothiesArray.filter((drink) => drink.name.match(regex));\n  };\n\n  //display matching card\n  const displaySmoothieMatches = (e) => {\n    e.preventDefault();\n    //compare input search to smoothie names\n    if (findSmoothieMatches(search, smoothies).length) {\n      const match = findSmoothieMatches(search, smoothies);\n\n      //display matching card\n      const renderMatchCard = match.map((card, i) => (\n        <SmoothieCard\n          key={card.id}\n          name={card.name}\n          ingredients={card.ingredients}\n          instructions={card.instructions}\n          notes={card.notes}\n          id={i}\n          deleteCard={deleteCard}\n          saveCardEdit={saveCardEdit}\n          smoothies={smoothies}\n          setIngredients={setIngredients}\n          setInstructions={setInstructions}\n          setNotes={setNotes}\n        />\n      ));\n      setRenderMatching(renderMatchCard);\n    } else {\n      alert(`Sorry, there are no matches for \"${search}\"!`);\n      setRenderMatching(renderCards);\n    }\n  };\n\n  return (\n    <div className=\"view-smoothies\">\n      <h1 className=\"slogan mt-5\">Welcome to the New You</h1>\n      <form className=\"search-form\" onSubmit={displaySmoothieMatches}>\n        <input\n          className=\"search-bar mt-5 ml-4\"\n          type=\"text\"\n          placeholder=\"Where's mah smoothie?\"\n          onChange={(e) => {\n            setSearch(e.target.value);\n          }}\n        />\n        <button type=\"submit\" className=\"btn btn-primary ml-4 mb-1\">\n          Search\n        </button>\n      </form>\n      <div className=\"view-cards\">\n        {renderMatching.length ? (\n          <div className=\"view-cards\">{renderMatching}</div>\n        ) : (\n          <div className=\"view-cards\">{renderCards}</div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ViewSmoothies;\n","/**\n * @name NavBar\n * @desc Navbar component that shows on each page.\n */\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction NavBar() {\n  return (\n    <div className=\"navBar\">\n      <li className=\"customLink title\">Navi's Smoothies</li>\n      <ul className=\"navBarLinks\">\n        <li className=\"list-inline-item\">\n          <Link className=\"customLink\" to=\"/\">\n            View All\n          </Link>\n        </li>\n        <li className=\"list-inline-item\">\n          <Link className=\"customLink\" to=\"/SmoothieForm\">\n            Create New\n          </Link>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default NavBar;\n","// Dummy data:\nconst cardHolder = [\n  {\n    name: \"May Unicorn\",\n    ingredients:\n      \"Nonfat yogurt - 2 cups, Almond milk - 1 cup, Mixed berries - 1 cup, Sour gummibears, Sprinkles - 1 TB\",\n    instructions: \"Add cashews for texture, blend with ice.\",\n    notes: \"Calories: 200g, Sugar: 13g, Protein: 11g\",\n  },\n  {\n    name: \"Kevin\",\n    ingredients:\n      \"Nonfat greek yogurt - 2 cups, Almond milk - 2 cups, SUPER CREATINE\",\n    instructions: \"Eat with hot cheetos, blend with ice.\",\n    notes: \"Calories: 0, Sugar: 000000000\",\n  },\n  {\n    name: \"NoDramaLlama\",\n    ingredients:\n      \"Nonfat greek yogurt - 1/2 cup, Unsweetened almond milk - 1 cups, Frozen sliced bananas - 2 cups, Flax seeds - 1 TB, ground coffee beans - 1/4 cup, boba balls\",\n    instructions: \"Blend on high until smooth\",\n    notes: \"Calories: 300g, Sugar: 21g, Fiber: 4g, Protein 20g\",\n  },\n];\n\nexport default cardHolder;\n","import React, { useState } from \"react\";\n\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport SmoothieForm from \"./components/SmoothieForm\";\nimport ViewSmoothies from \"./components/ViewSmoothies\";\nimport NavBar from \"./components/NavBar\";\nimport MockData from \"./../src/components/mockData\";\nimport useLocalStorage from \"./components/assets/useLocalStorage\";\nconst { v4: uuidv4 } = require(\"uuid\");\n\n/**\n * @terms\n * Link: serves similar purpose as an <a> tag.\n * Route: conditionally rendering of components depending on path.\n * Switch: required in order to only render one component at a time.\n */\n\nfunction App() {\n  //establish state for displaying all smoothie cards\n  const [smoothies, setSmoothies] = useLocalStorage(\"smoothies\", MockData);\n  const [newId, setNewId] = useState(3);\n\n  //to verify unique name\n  const isUniqueName = (name) => {\n    //iterate array of objects, verify name is unique\n    const isUnique = !smoothies.some((smoothie) => smoothie.name === name);\n    return isUnique;\n  };\n\n  //to add a smoothie card\n  const addCard = (newCard) => {\n    if (!isUniqueName(newCard.name)) {\n      alert(\"This name is already taken! Please enter a unique name.\");\n    } else {\n      let temp = [...smoothies];\n      const newId = uuidv4();\n      temp.push(newCard);\n      setSmoothies(temp);\n      setNewId(newId); //every time we add card, generate new id\n      alert(\"Card successfully added! Click on View All to see new card.\");\n    }\n  };\n\n  //to delete a smoothie card\n  const deleteCard = (card) => {\n    let temp = [...smoothies];\n    let indexToRemove = temp.indexOf(card);\n    temp.splice(indexToRemove, 1);\n    setSmoothies(temp);\n  };\n\n  //to edit name, must check unique name against itself\n  //is id same as id that we passed in?\n  const isEditNameUnique = (name, id) => {\n    //iterate array of objects, verify name is diff from current input name\n    //and other names from objects in array\n\n    const sameNameAndId = smoothies.some((card) => {\n      return card.name === name && card.id === id;\n    });\n\n    return sameNameAndId;\n  };\n\n  //to edit a smoothie card; update state from global to local variable\n  const saveCardEdit = (card) => {\n    if (isEditNameUnique(card.name, card.id) || isUniqueName(card.name)) {\n      let temp = [...smoothies];\n      //iterate thru temp to check if card.id matches temp[i].id, then indexToEdit = i\n      let indexToEdit;\n      for (let i = 0; i < temp.length; i++) {\n        if (card.id === temp[i].id) {\n          indexToEdit = i;\n        }\n      }\n      console.log(\"indexToEdit\", indexToEdit);\n      temp[indexToEdit].name = card.name;\n      temp[indexToEdit].ingredients = card.ingredients;\n      temp[indexToEdit].instructions = card.instructions;\n      temp[indexToEdit].notes = card.notes;\n      setSmoothies(temp);\n    } else {\n      alert(\"This name is already taken! Please enter another name.\");\n    }\n  };\n\n  return (\n    <div className=\"parentContainer\">\n      <Router>\n        <NavBar />\n\n        <div className=\"switchContainer\">\n          <Switch>\n            <Route exact path=\"/\">\n              <ViewSmoothies\n                smoothies={smoothies}\n                deleteCard={deleteCard}\n                saveCardEdit={saveCardEdit}\n              />\n            </Route>\n\n            <Route path=\"/SmoothieForm\">\n              <SmoothieForm addCard={addCard} newId={newId} />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}